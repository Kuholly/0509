题目描述：
      Fibonacci数列是这样定义的：
      F[0]=0
      F[1]=1
      for  each i>=2:F[i]=f[i-1]+F[i-2]
      因此，Fibonacci数列就行如：0，1，1，2，3，5，8，13，21.........，在Fibonacci数列中的
数我们称为Fibonacci数，给你一个N，你想让其变为一个Fibonacci数，每一步你可以把当前数字
X变为X-1或者X+1，现在给你一个数N求最少需要多少步可以变为Fibonacci数。
输入描述：
      输入一个正整数N（1<=N<=1000000）
输出描述：
      输出一个最小的步数变为Fibonacci数。
示例描述：
      输入：15
      输出：2
代码实现：
import java.io.*;
public class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine().trim());
        int first = 0;
        int second = 1;
        if(n == 1) {
            System.out.println("0");
            return;
        }
        while(true){
            int temp = first;
            first = second;
            second = temp + second;
            if(n > first && n <= second){
                int step = Math.min(n-first,second - n);
                System.out.println(step);
                return;
            }            
        }
    }
}

